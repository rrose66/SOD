Attribute VB_Name = "BAS_UPDATE_SOD"
Option Compare Database
Option Explicit

Public Const strFullPathForTemplateSOD As String = "C:\PROJECTS\DATA\FEDEBOM\CREDENTIAL_MANAGEMENT\SEGREGATION_OF_DUTIES\SOD\FEDEBOM_Separation_Of_Duties_Template.xlsx"
Public Const strFullPathForTargetSOD As String = "C:\PROJECTS\DATA\FEDEBOM\CREDENTIAL_MANAGEMENT\SEGREGATION_OF_DUTIES\SOD\FEDEBOM_Separation_Of_Duties_V10.xlsx"
Sub UpdateSODuniqueCDSIDconstraint()
    Stop
    Dim STR_SQL As String
    Dim STR_CMD As String
    Dim DBL_EOF As Double
    Dim BLN_CONFLICT_EXISTS As Boolean
    Dim appExcel As Excel.Application
    Dim WB As Excel.Workbook
    Dim WS As Excel.Worksheet
    Dim wsProductionCDSID As Excel.Worksheet
    
    BLN_CONFLICT_EXISTS = False
    Set appExcel = CreateObject("Excel.Application")
    
    Kill (strFullPathForTargetSOD)
    Set WB = appExcel.Workbooks.Open(strFullPathForTemplateSOD)
    Set wsProductionCDSID = WB.Worksheets("CDSIDs in Production")
    WB.SaveAs (strFullPathForTargetSOD)
    WB.Close
    Set WB = appExcel.Workbooks.Open(strFullPathForTargetSOD)
    Set WS = WB.Worksheets("FEDEB Separation of Duties Cntl")
    appExcel.Visible = True
    appExcel.ReferenceStyle = xlR1C1
    appExcel.WindowState = xlMaximized
    DBL_EOF = 19
    Dim RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID As Recordset
    Set RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID = CurrentDb.OpenRecordset("SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID")

    Dim INT_COUNT_OF_ROLES As Integer
    Dim STR_ACCUREV As String
    Dim STR_ACCUREV_CODE_PROMOTER_CDSID As String
    Dim STR_CDSID As String
    Dim STR_DEV As String
    Dim STR_D4_S2_CDSID As String
    Dim STR_REGISTERED_CDSID As String
    Dim STR_ROLE As String
    Dim STR_SCHEDULER As String
    Dim STR_SCHEDULER_CDSID As String
    Dim STR_SETUP_CDSID As String
    With RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID
        While Not .EOF
'            INT_COUNT_OF_ROLES = RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields(4).Value
            INT_COUNT_OF_ROLES = 1
'            STR_CDSID = RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields(2).Value
            STR_CDSID = .Fields("CDSID").Value
'            If STR_CDSID = "SIJAZ1" Then
''            Stop
'            End If
'            STR_ROLE = RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields(3).Value
            STR_ROLE = ""
            If RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields(1).Value = "DEV" Then
               STR_DEV = "*"
            Else
                STR_DEV = ""
            End If
            If RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields(2).Value = "ACCUREV" Then
               STR_ACCUREV = "*"
            Else
                STR_ACCUREV = ""
            End If
            If IsNull(RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields("PROD_CDSID").Value) Then
                STR_REGISTERED_CDSID = ""
            Else
                STR_REGISTERED_CDSID = RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields("PROD_CDSID").Value
            End If
            If IsNull(RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields("SCHEDULER_ACCESS_TO").Value) Then
                STR_SCHEDULER = ""
            Else
                STR_SCHEDULER = RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields("SCHEDULER_ACCESS_TO").Value
            End If
            
            
            If GET_FCT_CONFLICT("Dev", STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER) = "*" Then
                BLN_CONFLICT_EXISTS = True
            End If
            If BLN_CONFLICT_EXISTS = False And GET_FCT_CONFLICT("AccuRev", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER) = "*" Then
                BLN_CONFLICT_EXISTS = True
            End If
            If BLN_CONFLICT_EXISTS = False And GET_FCT_CONFLICT("QA", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER) = "*" Then
                BLN_CONFLICT_EXISTS = True
            End If
            If BLN_CONFLICT_EXISTS = False And GET_FCT_CONFLICT("DBA", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER) = "*" Then
                BLN_CONFLICT_EXISTS = True
            End If
            If BLN_CONFLICT_EXISTS = False And GET_FCT_CONFLICT("Scheduler", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER) = "*" Then
                BLN_CONFLICT_EXISTS = True
            End If
            If BLN_CONFLICT_EXISTS = False And GET_FCT_CONFLICT("Owner", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER) = "*" Then
                BLN_CONFLICT_EXISTS = True
            End If
            If RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields("SOD_ROLE").Value = "Exempt" Then
                BLN_CONFLICT_EXISTS = False
            End If
            If BLN_CONFLICT_EXISTS = True Then
                STR_CMD = RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields(1).Value & " "
    '            STR_CMD = STR_CMD & Chr(11) & "MANAGER: " & RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields("MANAGER").Value
    '            STR_CMD = STR_CMD & Chr(11) & FCT_GET_ALL_ROLES(RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields("CDSID").Value) & ")"
                With WS
                    .Cells(DBL_EOF, 1) = RST_SOD_PDO_TEAM_BUILDER_UNIQUE_CDSID.Fields(0).Value
                    .Cells(DBL_EOF, 2) = STR_CMD
                'MANAGER_ROLES: [FEDEBOM_IT_CDSID_SOD_ROLE]![SOD_ROLE] & "  " & [CLEANED_CDSID_LOOKUP_TOOL_RESULTS]![MANAGER] & " (" & FCT_GET_ALL_ROLES([FEDEBOM_IT_CDSIDs].[CDSID]) & ")"
                    .Cells(DBL_EOF, 3) = GET_FCT_CONFLICT("Analyst", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 4) = GET_FCT_CONFLICT("Dev", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 5) = GET_FCT_CONFLICT("System", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 6) = GET_FCT_CONFLICT("AccuRev", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 7) = GET_FCT_CONFLICT("QA", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 8) = GET_FCT_CONFLICT("DBA", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 9) = GET_FCT_CONFLICT("Setup", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 10) = GET_FCT_CONFLICT("Admin", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 11) = GET_FCT_CONFLICT("Scheduler", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 12) = GET_FCT_CONFLICT("Console", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 13) = GET_FCT_CONFLICT("Owner", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 14) = GET_FCT_CONFLICT("User", INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, STR_REGISTERED_CDSID, STR_SCHEDULER)
                    .Cells(DBL_EOF, 15) = GET_FCT_ACCESS_LEVEL(INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, "PROD", STR_REGISTERED_CDSID)
                    .Cells(DBL_EOF, 16) = GET_FCT_ACCESS_LEVEL(INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, "QA", STR_REGISTERED_CDSID)
                    .Cells(DBL_EOF, 18) = GET_FCT_ACCESS_LEVEL(INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, "AccuRev", STR_REGISTERED_CDSID)
                    .Cells(DBL_EOF, 24) = GET_FCT_ACCESS_LEVEL(INT_COUNT_OF_ROLES, STR_CDSID, STR_ROLE, "Setup", STR_REGISTERED_CDSID)
                    
                End With
             DBL_EOF = DBL_EOF + 1
            End If
            BLN_CONFLICT_EXISTS = False
            .MoveNext
        Wend
'        WS.Cells(45, 1).Select
    End With
'    PopulateTheTabProductionCDSID (wsProductionCDSID)
    Dim DBL_ROW As Double
    Dim RST_ORACLE_CDSID As Recordset
    Set RST_ORACLE_CDSID = CurrentDb.OpenRecordset("SELECT CDSID FROM ORACLE_CDSID")
    Set wsProductionCDSID = WB.Worksheets("CDSIDs in Production")
    With RST_ORACLE_CDSID
            DBL_ROW = DBL_ROW + 1
        wsProductionCDSID.Cells(1, 1) = "CDSID"
        While Not .EOF
            DBL_ROW = DBL_ROW + 1
            wsProductionCDSID.Cells(DBL_ROW, 1) = .Fields(0).Value
            .MoveNext
        Wend
    End With
    PopulateTheEvidenceTab
    
    WS.Activate
    
    WB.Save
    
    Stop
    MsgBox ("Done populating the SOD")

End Sub
Sub PopulateTheTabProductionCDSID(wsProductionCDSID As Worksheet)
'    Dim WS_PRODUCTION_CDSID As Excel.Worksheet
'    Set WS_PRODUCTION_CDSID = WB.Worksheets("CDSIDs in Production")
    Dim DBL_ROW As Double
    Dim RST_ORACLE_CDSID As Recordset
    Set RST_ORACLE_CDSID = CurrentDb.OpenRecordset("SELECT CDSID FROM ORACLE_CDSID")
    With RST_ORACLE_CDSID
        wsProductionCDSID.Cells(1, 1) = "CDSID"
        While Not .EOF
            DBL_ROW = DBL_ROW + 1
            wsProductionCDSID.Cells(DBL_ROW, 1) = "CDSID"
            .MoveNext
        Wend
    End With
End Sub
Sub UpdateSODallowingOneRecordPerRole()
    Dim STR_PDO_TEAM As String
    Dim intEOF As Integer
    Dim STR_SCANNED As String
    Dim STR_PRI_KEY As String
    Dim STR_ENVIRONMENT As String
    Dim STR_CONFIG As String
    Dim STR_EXT_SYSTEM As String
    Dim STR_EXT_SERVER As String
    Dim STR_EX_DB As String
    Dim STR_USER As String
    Dim STR_SQL As String
    Dim INT_REC_LEN As Integer
    Dim INT_CONFIG_BREAK As Integer
    Dim INT_EOF As Integer
    Dim INT_ENV_BREAK As Integer
    Dim BLN_SKIP_RECORD As Boolean
    Dim appExcel As Excel.Application
    Dim WB As Excel.Workbook
    Dim WS As Excel.Worksheet
    Set appExcel = CreateObject("Excel.Application")
'    Set WB = appExcel.Workbooks.Open("P:\Audit Regulatory\Security & Controls\Separation of Duties\WIP\FEDEBOM_Seperation Of Duties.xlsx")
    Set WB = appExcel.Workbooks.Open("C:\Users\rrose66\Downloads\FEDEBOM_Seperation Of Duties.xlsx")
    Set WS = Excel.Worksheets("FEDEB Separation of Duties Cntl")
    appExcel.Visible = True
    appExcel.WindowState = xlMaximized
    Dim BLN_CONTINUE As Boolean
    BLN_CONTINUE = True
    BLN_SKIP_RECORD = False
    INT_EOF = 45
    Dim RST_SOD_PDO_TEAM_BUILDER As Recordset
    Set RST_SOD_PDO_TEAM_BUILDER = CurrentDb.OpenRecordset("SOD_PDO_TEAM_BUILDER")
    With RST_SOD_PDO_TEAM_BUILDER
        While Not .EOF
            STR_PDO_TEAM = "PDO Team"
            With WS
                        .Cells(INT_EOF, 1) = RST_SOD_PDO_TEAM_BUILDER.Fields(0).Value
                        .Cells(INT_EOF, 2) = RST_SOD_PDO_TEAM_BUILDER.Fields(1).Value
                        If RST_SOD_PDO_TEAM_BUILDER.Fields(4).Value = "DEVELOPER" Then
                            .Cells(INT_EOF, 18) = "Limited"
                        End If
                        If RST_SOD_PDO_TEAM_BUILDER.Fields(5).Value = "READ ONLY" Then
                            .Cells(INT_EOF, 18) = "Read"
                        End If
                        If RST_SOD_PDO_TEAM_BUILDER.Fields(6).Value = "LEAD DEVELOPER" Then
                            .Cells(INT_EOF, 18) = "Yes"
                        End If
                        
                        If Len(.Cells(INT_EOF, 1)) > 0 Then
                            If InStr(1, .Cells(INT_EOF, 2), "BOM ADMIN") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "Business PROD Support") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "Buyer") > 0 Then
                                .Cells(INT_EOF, 15) = "Limited"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "CAD Author") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "Change Analyst Team") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "R ENGINEER") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "Data Admin") > 0 Then
                                .Cells(INT_EOF, 15) = ""
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "Engineer Central Team") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "External Viewer") > 0 Then
                                .Cells(INT_EOF, 15) = "Limited"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "Finance Analyst") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "Information Standards Team") > 0 Then
                                .Cells(INT_EOF, 15) = "Limited"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "JV BOM Admin") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "JV CAD Author") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "JV Engineer") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "JV Finance Analyst") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "JV PMT Leader") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "JV PPM Analyst") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "PMT Leader") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "PPM Analyst") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "PROD Support (IT)") > 0 Then
                                .Cells(INT_EOF, 15) = "Limited"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "Program Management") > 0 Then
                                .Cells(INT_EOF, 15) = "Yes"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "Supplier Engineer") > 0 Then
                                .Cells(INT_EOF, 15) = "Limited"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "Viewer") > 0 Then
                                .Cells(INT_EOF, 15) = "Limited"
                            End If
                            If InStr(1, .Cells(INT_EOF, 2), "WERS Refresh Admin") > 0 Then
                                .Cells(INT_EOF, 15) = "Limited"
                            End If
                            'NOW flag the user setup
                            If InStr(1, .Cells(INT_EOF, 2), "Business PROD Support") > 0 Then
'                                Stop
                                .Cells(INT_EOF, 24) = "Yes"
                            End If
                        End If
            End With
            INT_EOF = INT_EOF + 1
            .MoveNext
        Wend
    End With
    WB.Save
    WB.Close
    appExcel.Quit

End Sub
Function GET_FCT_CONFLICT( _
    ByRef strConstraint As String, _
    ByRef strCDSID As String, _
    ByRef strRegisteredCDSID As String, _
    ByRef SCHEDULER_CDSID As String, _
    ByRef D4_S2_CDSID As String, _
    ByRef ACCUREV_CODE_PROMOTER_CDSID As String, _
    ByRef SETUP_CDSID As String _
    ) As String
    
    Dim STR_SQL As String
    Dim BLN_DR_ENGINEER As Boolean
    Dim BLN_Business_PROD_Support As Boolean
    Dim RST_DEVELOPERS_BY_ROLE_ENV As Recordset
    Dim RST_D4S2_CDSID_ROLE_IN_DEV_FROM_KULDEEP As Recordset
    If strConstraint = "Dev" Then
        BLN_DR_ENGINEER = False
        BLN_Business_PROD_Support = False
        If strRegisteredCDSID = "" Then
            GET_FCT_CONFLICT = ""
        Else
            If D4_S2_CDSID <> "" Then
            GET_FCT_CONFLICT = "*"
            End If
        End If
    End If
    If strConstraint = "Owner" Then
        If SCHEDULER_CDSID = "" Then
            GET_FCT_CONFLICT = ""
        Else
            GET_FCT_CONFLICT = "*"
        End If
    End If
    If strConstraint = "Scheduler" Then
        If SCHEDULER_CDSID = "" Then
            GET_FCT_CONFLICT = ""
        Else
            GET_FCT_CONFLICT = "*"
        End If
    End If
    If strConstraint = "Setup" Then
        If SETUP_CDSID = "" Then
            If ACCUREV_CODE_PROMOTER_CDSID = "" Then
                GET_FCT_CONFLICT = ""
            End If
        Else
            If ACCUREV_CODE_PROMOTER_CDSID = "" Then
                GET_FCT_CONFLICT = ""
            Else
                GET_FCT_CONFLICT = "*"
            End If
        End If
'        Dim RST_ORACLE_CDSID_ROLE_REGISTERED_USERS As Recordset
'        BLN_DR_ENGINEER = False
'        BLN_Business_PROD_Support = False
'        STR_SQL = ""
'        STR_SQL = STR_SQL & "SELECT ROLE "
'        STR_SQL = STR_SQL & " FROM REGISTERED_CDSID_ROLE_FROM_ORACLE "
'        STR_SQL = STR_SQL & "WHERE CDSID = " & Chr(34) & strCDSID & Chr(34)
'        Set RST_ORACLE_CDSID_ROLE_REGISTERED_USERS = CurrentDb.OpenRecordset(STR_SQL)
'        With RST_ORACLE_CDSID_ROLE_REGISTERED_USERS
'            While Not .EOF
'                If RST_ORACLE_CDSID_ROLE_REGISTERED_USERS.Fields(0).Value = "BUSINESS PROD SUPPORT" Then
'                    GET_FCT_CONFLICT = "*"
'                    .MoveLast
'                Else
'                    GET_FCT_CONFLICT = ""
'                End If
'                .MoveNext
'            Wend
'        End With
    End If
    If strConstraint = "User" Then
        If strRegisteredCDSID > "" Then
            GET_FCT_CONFLICT = "*"
        Else
            GET_FCT_CONFLICT = ""
        End If
    End If
End Function
Function GET_FCT_ACCESS_LEVEL(ByRef intCountOfRoles, ByRef strCDSID As String, ByRef strRole As String, ByRef strConstraint As String, ByRef strRegisteredCDSID As String) As String
    Dim RST_ORACLE_CDSID_ROLE_REGISTERED_USERS As Recordset
    Dim RST_D4S2_CDSID_ROLE_IN_DEV_FROM_KULDEEP As Recordset
    
    If strConstraint = "PROD" Then
        Dim BLN_YES As Boolean
        Dim BLN_LIMITED As Boolean
        Dim BLN_LIMITED1 As Boolean
        Dim BLN_READ As Boolean
        Dim BLN_NO As Boolean
        Dim STR_ROLE_FIELD_VALUE As String
        BLN_YES = False
        BLN_LIMITED = False
        BLN_LIMITED1 = False
        BLN_READ = False
        BLN_NO = False
        Set RST_ORACLE_CDSID_ROLE_REGISTERED_USERS = CurrentDb.OpenRecordset("select role from ORACLE_CDSID_ROLE_REGISTERED_USERS where cdsid = " & Chr(34) & strCDSID & Chr(34))
        With RST_ORACLE_CDSID_ROLE_REGISTERED_USERS
            While Not .EOF
                STR_ROLE_FIELD_VALUE = RST_ORACLE_CDSID_ROLE_REGISTERED_USERS.Fields(0).Value
                If STR_ROLE_FIELD_VALUE = "D&R ENGINEER" Then
                    BLN_LIMITED1 = True
                End If
                If STR_ROLE_FIELD_VALUE = "VIEWER" Or STR_ROLE_FIELD_VALUE = "EXTERNAL VIEWER" Then
                    BLN_READ = True
                End If
                If STR_ROLE_FIELD_VALUE = "BOM ADMIN" _
                Or STR_ROLE_FIELD_VALUE = "BUSINESS PROD SUPPORT" _
                Or STR_ROLE_FIELD_VALUE = "CAD AUTHOR" _
                Or STR_ROLE_FIELD_VALUE = "DATA ADMIN" _
                Or STR_ROLE_FIELD_VALUE = "ENGINEER CENTRAL TEAM" _
                Or STR_ROLE_FIELD_VALUE = "PMT LEADER" _
                Then
                    BLN_YES = True
                End If
                If STR_ROLE_FIELD_VALUE = "BUYER" _
                Or STR_ROLE_FIELD_VALUE = "CHANGE ANALYST TEAM" _
                Or STR_ROLE_FIELD_VALUE = "FINANCE ANALYST" _
                Or STR_ROLE_FIELD_VALUE = "INFORMATION STANDARDS TEAM" _
                Or STR_ROLE_FIELD_VALUE = "JV BOM ADMIN" _
                Or STR_ROLE_FIELD_VALUE = "JV ENGINEER" _
                Or STR_ROLE_FIELD_VALUE = "JV FINANCE ANALYST" _
                Or STR_ROLE_FIELD_VALUE = "JV PMT LEADER" _
                Or STR_ROLE_FIELD_VALUE = "JV PPM ANALYST" _
                Or STR_ROLE_FIELD_VALUE = "PPM ANALYST" _
                Or STR_ROLE_FIELD_VALUE = "PROD SUPPORT (IT)" _
                Or STR_ROLE_FIELD_VALUE = "PROGRAM MANAGEMENT" _
                Or STR_ROLE_FIELD_VALUE = "SUPPLIER ENGINEER" _
                Or STR_ROLE_FIELD_VALUE = "WERS REFRESH ADMIN" _
                Then
                    BLN_LIMITED = True
                End If
                .MoveNext
            Wend
            If BLN_YES = True Then
                GET_FCT_ACCESS_LEVEL = "Yes"
            Else
                If BLN_LIMITED = True Then
                    GET_FCT_ACCESS_LEVEL = "Limited"
                Else
                    If BLN_LIMITED1 = True Then
                        GET_FCT_ACCESS_LEVEL = "Limited1"
                    Else
                        If BLN_READ = True Then
                            GET_FCT_ACCESS_LEVEL = "Read"
                        End If
                    End If
                End If
            End If
        End With
        RST_ORACLE_CDSID_ROLE_REGISTERED_USERS.Close
        Set RST_ORACLE_CDSID_ROLE_REGISTERED_USERS = Nothing
    End If
    
    If strConstraint = "QA" Then
        Dim RST_QA As Recordset
        Set RST_QA = CurrentDb.OpenRecordset("SELECT CDSID FROM I6S1 WHERE CDSID = " & Chr(34) & strCDSID & Chr(34))
        If RST_QA.RecordCount > 0 Then
            GET_FCT_ACCESS_LEVEL = "Yes"
        Else
            GET_FCT_ACCESS_LEVEL = "No"
        End If
        RST_QA.Close
        Set RST_QA = Nothing
    End If
    If strConstraint = "AccuRev" Then
        Dim RST_ACCUREV As Recordset
        Set RST_ACCUREV = CurrentDb.OpenRecordset("SELECT ROLE FROM ACCUREV WHERE CDSID = " & Chr(34) & strCDSID & Chr(34))
        If RST_ACCUREV.RecordCount > 0 Then
            GET_FCT_ACCESS_LEVEL = "Yes"
                If RST_ACCUREV.Fields(0).Value = "READ ONLY" Then
                    GET_FCT_ACCESS_LEVEL = "Read"
                ElseIf RST_ACCUREV.Fields(0).Value = "DEVELOPER" Then
                    GET_FCT_ACCESS_LEVEL = "Limited"
                ElseIf RST_ACCUREV.Fields(0).Value = "ADMIN" Then
                    GET_FCT_ACCESS_LEVEL = "Yes"
                ElseIf RST_ACCUREV.Fields(0).Value = "LEAD DEVELOPER" Then
                    GET_FCT_ACCESS_LEVEL = "Yes"
                End If
        
        Else
            GET_FCT_ACCESS_LEVEL = "No"
        End If
    End If
    If strConstraint = "Setup" Then
        Dim BLN_SETUP As Boolean
        BLN_SETUP = False
        If strCDSID = "AVISWAN9" Then
'            Stop
        End If
        'if cdsid is in accurev then
        Set RST_ORACLE_CDSID_ROLE_REGISTERED_USERS = CurrentDb.OpenRecordset("select role from ORACLE_CDSID_ROLE_REGISTERED_USERS where cdsid = " & Chr(34) & strCDSID & Chr(34))
'        If RST_ORACLE_CDSID_ROLE_REGISTERED_USERS.RecordCount > 0 Then
'            RST_ORACLE_CDSID_ROLE_REGISTERED_USERS.MoveFirst
'            RST_ORACLE_CDSID_ROLE_REGISTERED_USERS.MoveLast
'            If RST_ORACLE_CDSID_ROLE_REGISTERED_USERS.RecordCount = 1 Then
'                If RST_ORACLE_CDSID_ROLE_REGISTERED_USERS.Fields(0).Value = "BUSINESS PROD SUPPORT" Then
'                    GET_FCT_ACCESS_LEVEL = "Yes"
'                Else
'                    GET_FCT_ACCESS_LEVEL = "No"
'
'                End If
'            Else
        With RST_ORACLE_CDSID_ROLE_REGISTERED_USERS
            While Not .EOF
                If RST_ORACLE_CDSID_ROLE_REGISTERED_USERS.Fields(0).Value = "BUSINESS PROD SUPPORT" Then
                    BLN_SETUP = True
                    .MoveLast
                Else
                End If
                .MoveNext
            Wend
        End With
        If BLN_SETUP = True Then
            GET_FCT_ACCESS_LEVEL = "Yes"
        Else
            GET_FCT_ACCESS_LEVEL = "No"
        End If
'            End If
'        Else
'            GET_FCT_ACCESS_LEVEL = "No"
'        End If
        RST_ORACLE_CDSID_ROLE_REGISTERED_USERS.Close
        Set RST_ORACLE_CDSID_ROLE_REGISTERED_USERS = Nothing
    End If
End Function
Function FCT_GET_ALL_ROLES(ByRef strCDSID As String) As String
    Dim STR_SQL As String
    Dim RST_ALL_ROLES As Recordset
    Set RST_ALL_ROLES = CurrentDb.OpenRecordset("SELECT ROLE FROM ORACLE_CDSID_ROLE_REGISTERED_USERS  WHERE CDSID = " & Chr(34) & strCDSID & Chr(34))
    If RST_ALL_ROLES.RecordCount > 0 Then
        FCT_GET_ALL_ROLES = FCT_GET_ALL_ROLES & "Registered FEDEBOM Roles: "
        With RST_ALL_ROLES
            While Not .EOF
                FCT_GET_ALL_ROLES = FCT_GET_ALL_ROLES & "_" & .Fields(0).Value
                .MoveNext
            Wend
        End With
        RST_ALL_ROLES.Close
        Set RST_ALL_ROLES = Nothing
    End If
 
    
    STR_SQL = "SELECT ROLE FROM D4S2_CDSID_ROLE_IN_DEV_FROM_KULDEEP where CDSID = " & Chr(34) & strCDSID & Chr(34)
    Set RST_ALL_ROLES = CurrentDb.OpenRecordset(STR_SQL)
'    Stop
    If RST_ALL_ROLES.RecordCount > 0 Then
        With RST_ALL_ROLES
            FCT_GET_ALL_ROLES = FCT_GET_ALL_ROLES & "  DEV Roles: "
            While Not .EOF
                FCT_GET_ALL_ROLES = FCT_GET_ALL_ROLES & "_" & .Fields(0).Value
                .MoveNext
            Wend
        End With
    End If
    RST_ALL_ROLES.Close
    Set RST_ALL_ROLES = Nothing
    Set RST_ALL_ROLES = CurrentDb.OpenRecordset("SELECT ROLE FROM ACCUREV WHERE CDSID = " & Chr(34) & strCDSID & Chr(34))
    If RST_ALL_ROLES.RecordCount > 0 Then
        FCT_GET_ALL_ROLES = FCT_GET_ALL_ROLES & "  AccuRev Roles: "
        With RST_ALL_ROLES
            While Not .EOF
                FCT_GET_ALL_ROLES = FCT_GET_ALL_ROLES & "_" & .Fields(0).Value
                .MoveNext
            Wend
        End With
        RST_ALL_ROLES.Close
        Set RST_ALL_ROLES = Nothing
    End If
    
End Function
Function FCT_AUTO_RUN() As Boolean
'    Stop
    UpdateSODuniqueCDSIDconstraint
    FCT_AUTO_RUN = True
End Function
Sub PopulateTheEvidenceTab()
'    Dim RST_ORACLE_CDSID_ROLE As Recordset
'    Set RST_ORACLE_CDSID_ROLE = CurrentDb.OpenRecordset("SELECT * FROM ORACLE_CDSID_ROLE")
'    Dim wsProductionRoleAndCDSID As Worksheet
'    Set wsProductionRoleAndCDSID = WB.Worksheets("Production CDSID and Role")
'    DBL_ROW = 0
'    With RST_ORACLE_CDSID_ROLE
'        DBL_ROW = DBL_ROW + 1
'        wsProductionRoleAndCDSID.Cells(1, 1) = "CDSID"
'        wsProductionRoleAndCDSID.Cells(1, 2) = "ROLE"
'        While Not .EOF
'            DBL_ROW = DBL_ROW + 1
'            wsProductionRoleAndCDSID.Cells(DBL_ROW, 1) = RST_ORACLE_CDSID_ROLE.Fields(0).Value
'            wsProductionRoleAndCDSID.Cells(DBL_ROW, 2) = RST_ORACLE_CDSID_ROLE.Fields(1).Value
'            .MoveNext
'        Wend
'    End With
'    Stop


'    DBL_ROW = 1
'    Dim wsEvidences As Excel.Worksheet
'    Dim strLine As String
'    Set wsEvidences = WB.Worksheets("Evidences")
'    wsEvidences.Activate
'    wsEvidences.Cells(DBL_ROW, 1) = "Business Case Question"
'    wsEvidences.Cells(DBL_ROW, 2) = "CDSID"
'
''    While wsEvidences.Cells(DBL_ROW, 1) > ""
''        DBL_ROW = DBL_ROW + 1
''    Wend
'    DBL_ROW = DBL_ROW + 1
'    Open "C:\PROJECTS\DATA\FEDEBOM\CREDENTIAL_MANAGEMENT\SEGREGATION_OF_DUTIES\SOURCE_OF_TRUTH_DATA\RemoveTheseCDSIDs.txt" For Input As #1
'    While Not EOF(1)
'        Line Input #1, strLine
'        If strLine > "" Then
'        wsEvidences.Cells(DBL_ROW, 1) = "What is the business case for keeping this CDSID registered in FEDEBOM?"
'        wsEvidences.Cells(DBL_ROW, 2) = strLine
'        DBL_ROW = DBL_ROW + 1
'        End If
'    Wend
'
'    Dim RST_SOD_Evidence_Users_With_Prod As Recordset
'    Set RST_SOD_Evidence_Users_With_Prod = CurrentDb.OpenRecordset("SELECT * FROM SOD_Evidence_Users_With_Prod")
'    With RST_SOD_Evidence_Users_With_Prod
'        While Not .EOF
'            wsEvidences.Cells(DBL_ROW, 1) = .Fields(0).Value
'            wsEvidences.Cells(DBL_ROW, 2) = .Fields(1).Value
'            DBL_ROW = DBL_ROW + 1
'            .MoveNext
'        Wend
'    End With
'
'
'    Dim RST_SOD_USERS_WITH_DEV_AND_QA As Recordset
'    Set RST_SOD_USERS_WITH_DEV_AND_QA = CurrentDb.OpenRecordset("SELECT * FROM SOD_USERS_WITH_DEV_AND_QA")
'    With RST_SOD_USERS_WITH_DEV_AND_QA
'        While Not .EOF
'            wsEvidences.Cells(DBL_ROW, 1) = .Fields(0).Value
'            wsEvidences.Cells(DBL_ROW, 2) = .Fields(1).Value
'            DBL_ROW = DBL_ROW + 1
'            .MoveNext
'        Wend
'    End With
'
'
'
'    Dim RST_SOD_EVIDENCE_USERS_WITH_PROD_EDIT_AND_USER_SETUP As Recordset
'    Set RST_SOD_EVIDENCE_USERS_WITH_PROD_EDIT_AND_USER_SETUP = CurrentDb.OpenRecordset("SELECT * FROM SOD_EVIDENCE_USERS_WITH_PROD_EDIT_AND_USER_SETUP")
'    With RST_SOD_EVIDENCE_USERS_WITH_PROD_EDIT_AND_USER_SETUP
'        While Not .EOF
'            wsEvidences.Cells(DBL_ROW, 1) = .Fields(0).Value
'            wsEvidences.Cells(DBL_ROW, 2) = .Fields(1).Value
'            DBL_ROW = DBL_ROW + 1
'            .MoveNext
'        Wend
'    End With
'    Stop
'    Columns("A:B").Select
'    Columns("A:B").EntireColumn.AutoFit
'    Range("A1").Select
'    With ActiveWindow
'        .SplitColumn = 0
'        .SplitRow = 1
'    End With
'    ActiveWindow.FreezePanes = True
'    Sheets.Add
'    ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:= _
'        "Evidences!R1C1:R559C2", Version:=6).CreatePivotTable TableDestination:= _
'        "Sheet1!R3C1", TableName:="PivotTable1", DefaultVersion:=6
'    Sheets("Sheet1").Select
'    Cells(3, 1).Select
'    With ActiveSheet.PivotTables("PivotTable1")
'        .ColumnGrand = True
'        .HasAutoFormat = True
'        .DisplayErrorString = False
'        .DisplayNullString = True
'        .EnableDrilldown = True
'        .ErrorString = ""
'        .MergeLabels = False
'        .NullString = ""
'        .PageFieldOrder = 2
'        .PageFieldWrapCount = 0
'        .PreserveFormatting = True
'        .RowGrand = True
'        .SaveData = True
'        .PrintTitles = False
'        .RepeatItemsOnEachPrintedPage = True
'        .TotalsAnnotation = False
'        .CompactRowIndent = 1
'        .InGridDropZones = False
'        .DisplayFieldCaptions = True
'        .DisplayMemberPropertyTooltips = False
'        .DisplayContextTooltips = True
'        .ShowDrillIndicators = True
'        .PrintDrillIndicators = False
'        .AllowMultipleFilters = False
'        .SortUsingCustomLists = True
'        .FieldListSortAscending = False
'        .ShowValuesRow = False
'        .CalculatedMembersInFilters = False
'        .RowAxisLayout xlCompactRow
'    End With
'    With ActiveSheet.PivotTables("PivotTable1").PivotCache
'        .RefreshOnFileOpen = False
'        .MissingItemsLimit = xlMissingItemsDefault
'    End With
'    ActiveSheet.PivotTables("PivotTable1").RepeatAllLabels xlRepeatLabels
'    With ActiveSheet.PivotTables("PivotTable1").PivotFields( _
'        "Business Case Question")
'        .Orientation = xlRowField
'        .Position = 1
'    End With
'    ActiveSheet.PivotTables("PivotTable1").AddDataField ActiveSheet.PivotTables( _
'        "PivotTable1").PivotFields("CDSID"), "Count of CDSID", xlCount
'
'    ActiveSheet.Name = "Evidence Report"

End Sub
